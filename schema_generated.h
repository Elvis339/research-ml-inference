// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct AntiFraudRequest;
struct AntiFraudRequestBuilder;

struct AntiFraudResponse;
struct AntiFraudResponseBuilder;

struct AntiFraudRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AntiFraudRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OMV_ID = 4,
    VT_INPUTS = 6,
    VT_COLUMNS = 8,
    VT_ROWS = 10
  };
  const ::flatbuffers::String *omv_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OMV_ID);
  }
  const ::flatbuffers::Vector<double> *inputs() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_INPUTS);
  }
  uint8_t columns() const {
    return GetField<uint8_t>(VT_COLUMNS, 0);
  }
  uint8_t rows() const {
    return GetField<uint8_t>(VT_ROWS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OMV_ID) &&
           verifier.VerifyString(omv_id()) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           VerifyField<uint8_t>(verifier, VT_COLUMNS, 1) &&
           VerifyField<uint8_t>(verifier, VT_ROWS, 1) &&
           verifier.EndTable();
  }
};

struct AntiFraudRequestBuilder {
  typedef AntiFraudRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_omv_id(::flatbuffers::Offset<::flatbuffers::String> omv_id) {
    fbb_.AddOffset(AntiFraudRequest::VT_OMV_ID, omv_id);
  }
  void add_inputs(::flatbuffers::Offset<::flatbuffers::Vector<double>> inputs) {
    fbb_.AddOffset(AntiFraudRequest::VT_INPUTS, inputs);
  }
  void add_columns(uint8_t columns) {
    fbb_.AddElement<uint8_t>(AntiFraudRequest::VT_COLUMNS, columns, 0);
  }
  void add_rows(uint8_t rows) {
    fbb_.AddElement<uint8_t>(AntiFraudRequest::VT_ROWS, rows, 0);
  }
  explicit AntiFraudRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AntiFraudRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AntiFraudRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AntiFraudRequest> CreateAntiFraudRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> omv_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> inputs = 0,
    uint8_t columns = 0,
    uint8_t rows = 0) {
  AntiFraudRequestBuilder builder_(_fbb);
  builder_.add_inputs(inputs);
  builder_.add_omv_id(omv_id);
  builder_.add_rows(rows);
  builder_.add_columns(columns);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AntiFraudRequest> CreateAntiFraudRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *omv_id = nullptr,
    const std::vector<double> *inputs = nullptr,
    uint8_t columns = 0,
    uint8_t rows = 0) {
  auto omv_id__ = omv_id ? _fbb.CreateString(omv_id) : 0;
  auto inputs__ = inputs ? _fbb.CreateVector<double>(*inputs) : 0;
  return CreateAntiFraudRequest(
      _fbb,
      omv_id__,
      inputs__,
      columns,
      rows);
}

struct AntiFraudResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AntiFraudResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE = 4
  };
  double response() const {
    return GetField<double>(VT_RESPONSE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_RESPONSE, 8) &&
           verifier.EndTable();
  }
};

struct AntiFraudResponseBuilder {
  typedef AntiFraudResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_response(double response) {
    fbb_.AddElement<double>(AntiFraudResponse::VT_RESPONSE, response, 0.0);
  }
  explicit AntiFraudResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AntiFraudResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AntiFraudResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AntiFraudResponse> CreateAntiFraudResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double response = 0.0) {
  AntiFraudResponseBuilder builder_(_fbb);
  builder_.add_response(response);
  return builder_.Finish();
}

inline const AntiFraudRequest *GetAntiFraudRequest(const void *buf) {
  return ::flatbuffers::GetRoot<AntiFraudRequest>(buf);
}

inline const AntiFraudRequest *GetSizePrefixedAntiFraudRequest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AntiFraudRequest>(buf);
}

inline bool VerifyAntiFraudRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AntiFraudRequest>(nullptr);
}

inline bool VerifySizePrefixedAntiFraudRequestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AntiFraudRequest>(nullptr);
}

inline void FinishAntiFraudRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntiFraudRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAntiFraudRequestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntiFraudRequest> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
