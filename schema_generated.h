// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct AntiFraudInput;
struct AntiFraudInputBuilder;

struct AntiFraudResponse;
struct AntiFraudResponseBuilder;

struct AntiFraudInput FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AntiFraudInputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INPUTS = 4
  };
  const ::flatbuffers::Vector<double> *inputs() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_INPUTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INPUTS) &&
           verifier.VerifyVector(inputs()) &&
           verifier.EndTable();
  }
};

struct AntiFraudInputBuilder {
  typedef AntiFraudInput Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_inputs(::flatbuffers::Offset<::flatbuffers::Vector<double>> inputs) {
    fbb_.AddOffset(AntiFraudInput::VT_INPUTS, inputs);
  }
  explicit AntiFraudInputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AntiFraudInput> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AntiFraudInput>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AntiFraudInput> CreateAntiFraudInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> inputs = 0) {
  AntiFraudInputBuilder builder_(_fbb);
  builder_.add_inputs(inputs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AntiFraudInput> CreateAntiFraudInputDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *inputs = nullptr) {
  auto inputs__ = inputs ? _fbb.CreateVector<double>(*inputs) : 0;
  return CreateAntiFraudInput(
      _fbb,
      inputs__);
}

struct AntiFraudResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AntiFraudResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE = 4
  };
  const ::flatbuffers::Vector<double> *response() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_RESPONSE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RESPONSE) &&
           verifier.VerifyVector(response()) &&
           verifier.EndTable();
  }
};

struct AntiFraudResponseBuilder {
  typedef AntiFraudResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_response(::flatbuffers::Offset<::flatbuffers::Vector<double>> response) {
    fbb_.AddOffset(AntiFraudResponse::VT_RESPONSE, response);
  }
  explicit AntiFraudResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AntiFraudResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AntiFraudResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AntiFraudResponse> CreateAntiFraudResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> response = 0) {
  AntiFraudResponseBuilder builder_(_fbb);
  builder_.add_response(response);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AntiFraudResponse> CreateAntiFraudResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *response = nullptr) {
  auto response__ = response ? _fbb.CreateVector<double>(*response) : 0;
  return CreateAntiFraudResponse(
      _fbb,
      response__);
}

inline const AntiFraudInput *GetAntiFraudInput(const void *buf) {
  return ::flatbuffers::GetRoot<AntiFraudInput>(buf);
}

inline const AntiFraudInput *GetSizePrefixedAntiFraudInput(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AntiFraudInput>(buf);
}

inline bool VerifyAntiFraudInputBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AntiFraudInput>(nullptr);
}

inline bool VerifySizePrefixedAntiFraudInputBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AntiFraudInput>(nullptr);
}

inline void FinishAntiFraudInputBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntiFraudInput> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAntiFraudInputBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntiFraudInput> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
